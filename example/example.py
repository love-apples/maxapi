import asyncio
import logging

from maxapi import Bot, Dispatcher, F
from maxapi.context import MemoryContext, State, StatesGroup
from maxapi.types import Command, MessageCreated, CallbackButton, MessageCallback
from maxapi.utils.inline_keyboard import InlineKeyboardBuilder

from example.for_example import router

logging.basicConfig(level=logging.INFO)

bot = Bot('—Ç–æ–∫–µ–Ω')
dp = Dispatcher()
dp.include_routers(router)


start_text = '''–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:

/clear –æ—á–∏—â–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç
/state –∏–ª–∏ /context –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/data –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å
'''


class Form(StatesGroup):
    name = State()
    age = State()


@dp.on_started()
async def _():
    logging.info('–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!')


@dp.message_created(Command('clear'))
async def hello(obj: MessageCreated, context: MemoryContext):
    await context.clear()
    await obj.message.answer(f"–í–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª –æ—á–∏—â–µ–Ω!")


@dp.message_created(Command('data'))
async def hello(obj: MessageCreated, context: MemoryContext):
    data = await context.get_data()
    await obj.message.answer(f"–í–∞—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å: {str(data)}")


@dp.message_created(Command('context'))
@dp.message_created(Command('state'))
async def hello(obj: MessageCreated, context: MemoryContext):
    data = await context.get_state()
    await obj.message.answer(f"–í–∞—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {str(data)}")


@dp.message_created(Command('start'))
async def hello(obj: MessageCreated):
    builder = InlineKeyboardBuilder()

    builder.row(
        CallbackButton(
            text='–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è',
            payload='btn_1'
        ),
        CallbackButton(
            text='–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç',
            payload='btn_2'
        )
    )
    builder.row(
        CallbackButton(
            text='–ù–µ —Ö–æ—á—É',
            payload='btn_3'
        )
    )

    await obj.message.answer(
        text=start_text, 
        attachments=[builder.as_markup()] #  –î–ª—è MAX –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ, 
    )                                    # –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –≤–ª–æ–∂–µ–Ω–∏–π
    

@dp.message_callback(F.callback.payload == 'btn_1')
async def hello(obj: MessageCallback, context: MemoryContext):
    await context.set_state(Form.name)
    await obj.message.delete()
    await obj.message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–º—è:')


@dp.message_callback(F.callback.payload == 'btn_2')
async def hello(obj: MessageCallback, context: MemoryContext):
    await context.set_state(Form.age)
    await obj.message.delete()
    await obj.message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')


@dp.message_callback(F.callback.payload == 'btn_3')
async def hello(obj: MessageCallback, context: MemoryContext):
    await obj.message.delete()
    await obj.message.answer(f'–ù—É –ª–∞–¥–Ω–æ ü•≤')


@dp.message_created(F.message.body.text, Form.name)
async def hello(obj: MessageCreated, context: MemoryContext):
    await context.update_data(name=obj.message.body.text)

    data = await context.get_data()

    await obj.message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {data['name'].title()}!")
    

@dp.message_created(F.message.body.text, Form.age)
async def hello(obj: MessageCreated, context: MemoryContext):
    await context.update_data(age=obj.message.body.text)

    await obj.message.answer(f"–û–≥–æ! –ê –º–Ω–µ –≤—Å–µ–≥–æ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å üòÅ")


async def main():
    await dp.start_polling(bot)
    # await dp.handle_webhook(
    #     bot=bot,
    #     host='localhost',
    #     port=8080
    # )


asyncio.run(main())